#!/usr/bin/python

######
# Modify a property of a player

import sys
import getopt

from Player import Player
from Alignment import Alignment
from Database import DB
import Util

def usage():
	print """Usage: setstat [options] { <playername> | -i <actorid> } <propertyname> <value>
Options:
\t-i, --id=<n>\t\tUse actor id <n>
\t-n, --int\t\tForce value to integer
\t-f, --float\t\tForce value to float
\t-s, --string\t\tForce value to string
\t-o, --object\t\tForce value to an object identifier:
\t\t\t\t\t:c\tThe current player
\t\t\t\t\t:p<n>\tThe player/actor with ID <n>
\t\t\t\t\t:P<name>\tThe player with name <name>
"""

try:
	optlist, args = getopt.gnu_getopt(sys.argv[1:], 'h?i:nfs', ['help', 'id=', 'int', 'float', 'string'])
except getopt.GetoptError, err:
	print str(err)
	usage()
	sys.exit(1)

aid = None
typ = None

for o, a in optlist:
	if o in ('-h', '-?', '--help'):
		usage()
		sys.exit(0)
	elif o in ('-i', '--id'):
		aid = int(a)
	elif o in ('-n', '--int'):
		typ = int
	elif o in ('-f', '--float'):
		typ = float
	elif o in ('-s', '--string'):
		typ = str
	elif o in ('-o', '--object'):
		typ = None
	else:
		usage()
		sys.exit(0)

if len(args) < 2 or len(args) > 3:
	usage()
	sys.exit(2)

if aid is not None:
	p = Actor.load(aid)
else:
	p = Player.load_by_name(args.pop(0))

if p is None:
    print "Player not found"
    sys.exit(3)

# Convert the string parameter from the command line to an appropriate
# type
if typ is None:
	value = Util.retype(args[1])
else:
	value = typ(args[1])

# Walk through the object tree, if there are dots in the parameter
path = args[0].split('.')
ob = p
while len(path) > 1:
	ob = getattr(ob, path.pop(0))

setattr(ob, path[0], value)

p.save(force = True)
DB.commit()
