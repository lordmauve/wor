#!/usr/bin/python

import sys
from random import randrange, random, seed
import getopt
import math

FLIP=False
SCALE=10
CRAGGINESS=3.0

def usage():
	print """Usage: loc-fractal [options] { [patch-options] -c <craton-file> -k <scaffold-file> | -H <height-file> }
Options:
\t-s, --scale=<n>\t\tUse scale of <n> (10)
Patch-Options:
\t-f, --flip\t\tTransform input by flipping about hypotenuse
\t-o, --offset=<x>,<y>\tTranslate input file (after flipping)"""

try:
	optlist, args = getopt.gnu_getopt(sys.argv[1:], 'h?fo:s:c:k:H:', ['help', 'scale=', 'flip', 'offset=', 'craton=', 'scaffold=', 'height='])
except getopt.GetoptError, err:
	print str(err)
	usage()
	sys.exit(1)

fopts = { 'ox': 0, 'oy': 0 }
cfiles = []
sfiles = []
hfiles = []

for o, a in optlist:
	if o in ('-h', '--help', '-?'):
		usage()
		sys.exit(0)
	elif o in ('-s', '--scale'):
		SCALE = int(a)
	elif o in ('-f', '--flip'):
		fopts['flip'] = True
	elif o in ('-o', '--offset'):
		fopts['ox'], fopts['oy'] = [ int(v) for v in a.split(',') ]
	elif o in ('-c', '--craton'):
		fopts['file'] = a
		cfiles.append(fopts)
		fopts = { 'ox': 0, 'oy': 0 }
	elif o in ('-k', '--scaffold'):
		fopts['file'] = a
		sfiles.append(fopts)
		fopts = { 'ox': 0, 'oy': 0 }
	elif o in ('-H', '--height'):
		fopts['file'] = a
		hfiles.append(fopts)
		fopts = { 'ox': 0, 'oy': 0 }
	else:
		usage()
		sys.exit(1)

MAX_X=(1<<SCALE)+1

if len(args) > 0:
	usage()
	sys.exit(1)

cragginess = [ [ None for y in range(0, MAX_X-x) ] for x in range(0, MAX_X) ]
height = [ [ None for y in range(0, MAX_X-x) ] for x in range(0, MAX_X) ]

def transform_coords(x, y, f):
	if 'flip' in f and f['flip']:
		x = MAX_X-x
		y = MAX_X-y
	x += f['ox']
	y += f['oy']
	return (x, y)

def load_to_array(array, f):
	ifile = open(f['file'], 'r')

	# Read file parameters: size
	bits = ifile.next().split(' ')
	size = int(bits[0])
	# ... and stride
	stride = 1
	if len(bits) > 2:
		stride = int(bits[1])

	# Loop through the file and read its parameters
	x = 0
	for line in ifile:
		elts = line.split()
		y = 0
		for e in elts:
			tx, ty = transform_coords(x, y, f)
			if 0 <= tx <= MAX_X and 0 <= ty <= MAX_X-x:
				array[tx][ty] = e
			y += stride
		x += stride
	ifile.close()

# Load the cragginess files
for f in cfiles:
	load_to_array(cragginess, f)

# Load the skeleton files
for f in sfiles:
	load_to_array(height, f)

# Load the height files
for f in hfiles:
	load_to_array(height, f)

# Force everything to the right datatype
for x in range(0, MAX_X):
	for y in range(0, MAX_X-x):
		if height[x][y] != None:
			height[x][y] = int(height[x][y])
		if cragginess[x][y] != None:
			cragginess[x][y] = float(cragginess[x][y])

# Now do the midpoint division algorithm
stride = 1 << SCALE
while stride > 0:
	sys.stderr.write("Stride %d\n" % (stride))
	xbit = True
	for x in range(0, MAX_X, stride):
		xbit = not xbit
		ybit = True
		maxy = MAX_X - x
		for y in range(0, maxy, stride):
			ybit = not ybit
			if height[x][y] != None:
				continue
			tot = 0.0
			count = 0.0
			if xbit:
				if ybit:
					if y - stride >= 0 and (y-stride) + (x+stride) <= MAX_X:
						count += 2
						tot += 2* height[x+stride][y-stride]
					if x - stride >= 0 and (y+stride) + (x-stride) <= MAX_X:
						count += 2
						tot += 2* height[x-stride][y+stride]
					if x - stride >= 0 and y - stride >= 0:
						count += 1
						tot += height[x-stride][y-stride]
					if (y+stride) + (x+stride) <= MAX_X:
						count += 1
						tot += height[x+stride][y+stride]
				else:
					if x - stride >= 0:
						count += 2
						tot += 2* height[x-stride][y]
					if y + (x+stride) <= MAX_X:
						count += 2
						tot += 2* height[x+stride][y]
					if ( (y+2*stride) + (x-stride) <= MAX_X
						 and x - stride >= 0):
						count += 1
						tot += height[x-stride][y+2*stride]
					if y - 2*stride >= 0:
						count += 1
						tot += height[x+stride][y-2*stride]
			else:
				if ybit:
					if y - stride >= 0:
						count += 2
						tot += 2* height[x][y-stride]
					if y + stride <= maxy:
						count += 2
						tot += 2* height[x][y+stride]
					if x - 2*stride >= 0:
						count += 1
						tot += height[x-2*stride][y+stride]
					if ( (y-stride) + (x+2*stride) <= MAX_X
						 and y - stride >= 0):
						count += 1
						tot += height[x+2*stride][y-stride]
				else:
					sys.stderr.write("xbit and ybit are both false: WTF?\n")

			if count == 0.0:
				sys.stderr.write("Count is zero: WTF? %d %d %d %d %d %d %d\n" % (stride, x, y, xbit, ybit, maxx, maxy))

			height[x][y] = tot / count

			rrange = stride * CRAGGINESS * cragginess[x][y]

			height[x][y] += randrange(-math.floor(rrange),
									  math.floor(rrange)+1)

	stride >>= 1


print MAX_X
for x in range(0, MAX_X):
	for y in range(0, MAX_X-x):
		print height[x][y],
	print

