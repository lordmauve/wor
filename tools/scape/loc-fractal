#!/usr/bin/python

import sys
from random import randrange, random, seed
import getopt
import math

import common

FLIP=False
SUBSET=1

def usage():
	print """Usage: loc-fractal [options] { [patch-options] -c <craton-file> -k <scaffold-file> | -H <height-file> }
Options:
\t-s, --scale=<n>\t\tUse scale of <n> (10)
\t-b, --blend\t\tBlend more smoothly
Patch-Options:
\t-f, --flip\t\tTransform input by flipping about hypotenuse
\t-o, --offset=<x>,<y>\tTranslate input file (after flipping)"""

try:
	optlist, args = getopt.gnu_getopt(sys.argv[1:], 'h?fo:s:c:k:H:b', ['help', 'scale=', 'flip', 'offset=', 'craton=', 'scaffold=', 'height=', 'blend'])
except getopt.GetoptError, err:
	print str(err)
	usage()
	sys.exit(1)

blend = False
fopts = { 'ox': 0, 'oy': 0 }
cfiles = []
sfiles = []
hfiles = []

for o, a in optlist:
	if o in ('-h', '--help', '-?'):
		usage()
		sys.exit(0)
	elif o in ('-s', '--scale'):
		common.SCALE = int(a)
	elif o in ('-b', '--blend'):
		blend = True
	elif o in ('-f', '--flip'):
		fopts['flip'] = True
	elif o in ('-o', '--offset'):
		fopts['ox'], fopts['oy'] = [ int(v) for v in a.split(',') ]
	elif o in ('-c', '--craton'):
		fopts['file'] = a
		cfiles.append(fopts)
		fopts = { 'ox': 0, 'oy': 0 }
	elif o in ('-k', '--scaffold'):
		fopts['file'] = a
		sfiles.append(fopts)
		fopts = { 'ox': 0, 'oy': 0 }
	elif o in ('-H', '--height'):
		fopts['file'] = a
		hfiles.append(fopts)
		fopts = { 'ox': 0, 'oy': 0 }
	else:
		usage()
		sys.exit(1)

MAX_X=(1<<common.SCALE)+1
CRAGGINESS = 128.0 / (1<<common.SCALE)

if len(args) > 0:
	usage()
	sys.exit(1)

cragginess = [ [ None for y in range(0, MAX_X-x) ] for x in range(0, MAX_X) ]
height = [ [ None for y in range(0, MAX_X-x) ] for x in range(0, MAX_X) ]

def transform_coords(x, y, f):
	if 'flip' in f and f['flip']:
		x = MAX_X-x
		y = MAX_X-y
	x += f['ox']
	y += f['oy']
	return (x, y)

sys.stderr.write("Reading files\n")

# Load the cragginess files
for f in cfiles:
	common.load_to_array(cragginess, f, transform_coords)

# Load the skeleton files
for f in sfiles:
	common.load_to_array(height, f, transform_coords)

# Load the height files
for f in hfiles:
	common.load_to_array(height, f, transform_coords)

# Force everything to the right datatype
for x in range(0, MAX_X):
	for y in range(0, MAX_X-x):
		if height[x][y] != None:
			height[x][y] = int(float(height[x][y]))
		if cragginess[x][y] != None:
			cragginess[x][y] = float(cragginess[x][y])

# Now do the midpoint division algorithm
stride = 1 << common.SCALE
while stride >= SUBSET:
	sys.stderr.write("Stride %d\n" % (stride))
	xbit = True
	for x in range(0, MAX_X, stride):
		xbit = not xbit
		ybit = True
		maxy = MAX_X - x
		for y in range(0, maxy, stride):
			ybit = not ybit
			if height[x][y] != None:
				continue
			#sys.stderr.write( "Calculating " + str(x) + ", " + str(y) + "\n")
			tot = 0.0
			count = 0.0
			if xbit:
				if ybit:
					if y - stride >= 0 and (y-stride) + (x+stride) <= MAX_X:
						count += 2
						tot += 2* height[x+stride][y-stride]
						#sys.stderr.write( "  ++ %d, %d = %d\n" % (x+stride, y-stride, height[x+stride][y-stride]))
					if x - stride >= 0 and (y+stride) + (x-stride) <= MAX_X:
						count += 2
						tot += 2* height[x-stride][y+stride]
						#sys.stderr.write( "  ++ %d, %d = %d\n" % (x-stride, y+stride, height[x-stride][y+stride]))
					if blend and x - stride >= 0 and y - stride >= 0:
						count += 1
						tot += height[x-stride][y-stride]
						#sys.stderr.write( "   + %d, %d = %d\n" % (x-stride, y-stride, height[x-stride][y-stride]))
					if blend and (y+stride) + (x+stride) <= MAX_X:
						count += 1
						tot += height[x+stride][y+stride]
						#sys.stderr.write( "   + %d, %d = %d\n" % (x+stride, y+stride, height[x+stride][y+stride]))
				else:
					if x - stride >= 0:
						count += 2
						tot += 2* height[x-stride][y]
						#sys.stderr.write( "  ++ %d, %d = %d\n" % (x-stride, y, height[x-stride][y]))
					if y + (x+stride) <= MAX_X:
						count += 2
						tot += 2* height[x+stride][y]
						#sys.stderr.write( "  ++ %d, %d = %d\n" % (x+stride, y, height[x+stride][y]))
					if blend and ( (y+2*stride) + (x-stride) <= MAX_X
						 and x - stride >= 0):
						count += 1
						tot += height[x-stride][y+2*stride]
						#sys.stderr.write( "   + %d, %d = %d\n" % (x-stride, y+2*stride, height[x-stride][y+2*stride]))
					if blend and y - 2*stride >= 0:
						count += 1
						tot += height[x+stride][y-2*stride]
						#sys.stderr.write( "   + %d, %d = %d\n" % (x+stride, y-2*stride, height[x+stride][y-2*stride]))
			else:
				if ybit:
					if y - stride >= 0:
						count += 2
						tot += 2* height[x][y-stride]
						#sys.stderr.write( "  ++ %d, %d = %d\n" % (x, y-stride, height[x][y-stride]))
					if y + stride <= maxy:
						count += 2
						tot += 2* height[x][y+stride]
						#sys.stderr.write( "  ++ %d, %d = %d\n" % (x, y+stride, height[x][y+stride]))
					if blend and x - 2*stride >= 0:
						count += 1
						tot += height[x-2*stride][y+stride]
						#sys.stderr.write( "   + %d, %d = %d\n" % (x-2*stride, y+stride, height[x-2*stride][y+stride]))
					if blend and ( (y-stride) + (x+2*stride) <= MAX_X
						 and y - stride >= 0):
						count += 1
						tot += height[x+2*stride][y-stride]
						#sys.stderr.write( "   + %d, %d = %d\n" % (x+2*stride, y-stride, height[x+2*stride][y-stride]))
				else:
					sys.stderr.write("xbit and ybit are both false: WTF?\n")

			if count == 0.0:
				sys.stderr.write("Count is zero: WTF? %d %d %d %d %d %d %d\n" % (stride, x, y, xbit, ybit, maxx, maxy))

			height[x][y] = tot / count
			#sys.stderr.write("  mean = " + str(height[x][y]) + "\n")

			rrange = stride * cragginess[x][y] * CRAGGINESS
			#sys.stderr.write("  range = " + str(rrange) + "\n")

			offset = randrange(-math.ceil(rrange),
							   math.ceil(rrange)+1)
			#sys.stderr.write("  offset = " + str(offset) + "\n")
			height[x][y] += offset

	stride >>= 1

sys.stderr.write("Writing file\n")

print MAX_X
for x in range(0, MAX_X, SUBSET):
	for y in range(0, MAX_X-x, SUBSET):
		print height[x][y],
	print
