#!/usr/bin/python

import sys
import getopt
import Image
import ImageDraw
import math

import common

PXSZ=2

def usage():
	print """Usage: plot [options] --file <name> [file-options]
Options:
\t-o, --output=<file>\tOutput file
\t-f, --file=<name>\tPlot data from <name>
\t-s, --scale=<s>\t\tUse a scale of <s>
\t-p, --pixels=<n>\t\tDraw blocks <n> pixels wide
\t-H, --hex\t\tRestrict to a hexagon

File Options:
\t-0, --zero\t\tZero value in data is zero in output;
\t\t\t\t  scale maximum to fit
\t-e, --even\t\tZero value in data is centre in output;
\t\t\t\t  scale data to fit
\t    --min-max=<n>,<m>\t\tScale data to min/max range of [<n>, <m>)

\t-t, --threshold=<v>\tValues below <v> are plotted as a
\t\t\t\t  different colour
\t-c, --threshold-colour=<r>,<g>,<b>
\t\t\t\tColour to plot threshold values as

\t-m, --mask=<r>,<g>,<b>\tPlot this file using the colour mask
\t-l, --log\t\tTransform input data using a log function

Plots one or more input files.
"""

try:
	optlist, args = getopt.getopt(sys.argv[1:], 'h?o:f:0et:c:m:s:p:lH', ['help', 'output=', 'file=', 'zero', 'even', 'threshold=', 'threshold-colour=', 'mask=', 'scale=', 'pixels=', 'log', 'min-max=', 'hex'])
except getopt.GetoptError, err:
	print str(err)
	usage()
	sys.exit(1)

output = "plot.png"
files = []
fdata_base = { 'mask': (255.0/256.0,255.0/256.0,255.0/256.0),
			   'colour': (0.0, 0.0, 255.0) }
fdata = dict(fdata_base)
hex_restrict = False

for o, a in optlist:
	if o in ('-h', '--help', '-?'):
		usage()
		sys.exit(0)
	elif o in ('-o', '--output'):
		output = a
	elif o in ('-f', '--file'):
		if len(fdata) > len(fdata_base):
			files.append(fdata)
			fdata = dict(fdata_base)
		fdata['name'] = a
	elif o in ('-0', '--zero'):
		fdata['zero'] = True
	elif o in ('-e', '--even'):
		fdata['even'] = True
	elif o in ('-t', '--threshold'):
		fdata['threshold'] = float(a)
	elif o in ('-c', '--threshold-colour'):
		fdata['colour'] = a.split(',')
	elif o in ('-m', '--mask'):
		fdata['mask'] = [float(x)/256.0 for x in a.split(',')]
	elif o in ('-s', '--scale'):
		common.SCALE = int(a)
	elif o in ('-p', '--pixels'):
		PXSZ = int(a)
	elif o in ('-l', '--log'):
		fdata['log'] = True
	elif o in ('-H', '--hex'):
		hex_restrict = True
	elif o in ('--min-max'):
		tmp = a.split(',')
		fdata['min'] = float(tmp[0])
		fdata['max'] = float(tmp[1])
	else:
		usage()
		sys.exit(1)

if len(fdata) > 0:
	files.append(fdata)

MAX_X = (1<<common.SCALE)+1

# First, loop through all of the files, get coordinate ranges for all
# inputs
for f in files:
	if 'min' in f:
		if 'log' in f and f['log']:
			f['min'] = math.log(f['min']+1)
			f['max'] = math.log(f['max']+1)
	else:
		minv = 1e6
		maxv = -1e6
		data = open(f['name'], 'r')
		params = data.next()
		
		for line in data:
			elts = line.split()
			for e in elts:
				e = float(e)
				if 'log' in f and f['log']:
					e = math.log(e+1)
				minv = min(minv, e)
				maxv = max(maxv, e)
		data.close()
	
		if 'zero' in f and f['zero']:
			minv = 0
		if 'even' in f and f['even']:
			maxv = max(-minv, maxv)
			minv = -maxv
		f['max'] = maxv
		f['min'] = minv
		
	rng = float(f['max']-f['min'])
	f['scale'] = lambda x: (x-f['min']) / float(f['max']-f['min'])
	print f['name'], "min =", f['min'], "max =", f['max']

# Now go back and loop through them all again, and actually plot stuff
img = Image.new("RGBA", (MAX_X*PXSZ, MAX_X*PXSZ))
draw = ImageDraw.Draw(img)

for f in files:
	f['data'] = open(f['name'], 'r')
	params = f['data'].next()
	print "Scaled", f['scale'](f['min']), f['scale'](f['max'])
	f['colour'] = [ float(i) for i in f['colour'] ]

xz = int(round(MAX_X/3.0))
yz = int(round(MAX_X/3.0))
r = int(round(MAX_X/3.0))

x = 0
try:
	while True:
		lines = []
		for f in files:
			lines.append(f['data'].next().split())
		y = 0
		for data_slice in zip(*lines):
			rad = max(abs(x-xz), abs(y-yz), abs(x+y-xz-yz))
			if hex_restrict and rad >= r:
				y += 1
				continue
			rgb = [0.0, 0.0, 0.0]
			
			for v, f in zip(data_slice, files):
				v = float(v)
				if 'threshold' in f and v < f['threshold']:
					rgb[0] += f['colour'][0]
					rgb[1] += f['colour'][1]
					rgb[2] += f['colour'][2]
				else:
					if 'log' in f and f['log']:
						v = math.log(v+1)
					scaled = f['scale'](v) * 255.0
					rgb[0] += scaled * f['mask'][0]
					rgb[1] += scaled * f['mask'][1]
					rgb[2] += scaled * f['mask'][2]

			rgb = (int(rgb[0]), int(rgb[1]), int(rgb[2]))
				
			tx = x*PXSZ + y*PXSZ/2
			ty = y*PXSZ
			draw.rectangle((tx, ty, tx+PXSZ-1, ty+PXSZ-1), outline=rgb, fill=rgb)
			y += 1
		x += 1
except StopIteration:
	pass

del draw
img.save(output)
