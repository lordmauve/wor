#!/usr/bin/python

import sys
from random import randrange, random, seed
import getopt
import math

import common

FLIP=False
SUBSET=1

def usage():
	print """Usage: hydro [options] { [patch-options] -H <height-file> }
Options:
\t-s, --scale=<n>\t\tUse scale of <n> (10)
Patch-Options:
\t-f, --flip\t\tTransform input by flipping about hypotenuse
\t-o, --offset=<x>,<y>\tTranslate input file (after flipping)"""

try:
	optlist, args = getopt.gnu_getopt(
		sys.argv[1:],
		'h?fo:s:H:',
		['help', 'scale=', 'flip', 'offset=', 'height=' ])
except getopt.GetoptError, err:
	print str(err)
	usage()
	sys.exit(1)

blend = False
fopts = { 'ox': 0, 'oy': 0 }
hfiles = []

for o, a in optlist:
	if o in ('-h', '--help', '-?'):
		usage()
		sys.exit(0)
	elif o in ('-s', '--scale'):
		common.SCALE = int(a)
	elif o in ('-f', '--flip'):
		fopts['flip'] = True
	elif o in ('-o', '--offset'):
		fopts['ox'], fopts['oy'] = [ int(v) for v in a.split(',') ]
	elif o in ('-H', '--height'):
		fopts['file'] = a
		hfiles.append(fopts)
		fopts = { 'ox': 0, 'oy': 0 }
	else:
		usage()
		sys.exit(1)

MAX_X=(1<<common.SCALE)+1

if len(args) > 0:
	usage()
	sys.exit(1)

if len(hfiles) <= 0:
	usage()
	sys.exit(1)

#######################

def transform_coords(x, y, f):
	if 'flip' in f and f['flip']:
		x = MAX_X-x
		y = MAX_X-y
	x += f['ox']
	y += f['oy']
	return (x, y)

def get_neighbours(x, y):
	ret = set()

	if x > 0:
		ret.add((x-1, y))
		ret.add((x-1, y+1))
	if y > 0:
		ret.add((x, y-1))
		ret.add((x+1, y-1))
	if x+y < MAX_X-1:
		ret.add((x, y+1))
		ret.add((x+1, y))

	return ret

def get_downhill(x, y, height):
	"""Return the set of hexes which are downhill of here"""
	ret = []
	thh = height[x][y]
	if x > 0:
		if height[x-1][y] < thh:
			ret.append((x-1, y))
		if height[x-1][y+1] < thh:
			ret.append((x-1, y+1))
	if y > 0:
		if height[x][y-1] < thh:
			ret.append((x, y-1))
		if height[x+1][y-1] < thh:
			ret.append((x+1, y-1))
	if x+y < MAX_X-1:
		if height[x][y+1] < thh:
			ret.append((x, y+1))
		if height[x+1][y] < thh:
			ret.append((x+1, y))

	#if 50 <= x <= 54 and 13 <= y <= 17:
	#	print "At (%d, %d): neighbours are %s" % (x, y, str(ret))

	minh = 0.0
	minl = None
	for l in ret:
		x, y = l
		h = height[x][y]
		if minl is None or h <= minh:
			minh = h
			minl = l
	if minl is not None:
		return minl
	return None

def run_downhill(x, y, sinks, height, down, usage, block, inc):
	wrt = (50 <= x <= 54 and 13 <= y <= 17)

	dist = 0
	to = down[x][y]
	sinkpos = (x, y)
	while to is not None:
		sinkpos = to
		usage[to[0]][to[1]] += inc
		if usage[to[0]][to[1]] > 100000:
			print "Huge usage at", to, "leading to", down[to[0]][to[1]], "originating at", x, y
		to = down[to[0]][to[1]]
	block[x][y] = sinks[sinkpos]
	sinks[sinkpos].catchment.add(sinkpos)

def write_file(name, fn):
	if name == '-':
		f = sys.stdout
	elif name is not None:
		f = open(name, "w")

	if name is not None:
		f.write(str(MAX_X) + "\n")
		for x in xrange(0, MAX_X, SUBSET):
			for y in xrange(0, MAX_X-x, SUBSET):
				f.write(str(fn(x,y)) + " ")
			f.write("\n")

def degroup(tsinks, down):
	# Take the list of hexes in tsinks, and for each contiguous group,
	# pick just one, and ensure that the rest all drain into it
	
	# Find all pairs of adjacent sinks that don't otherwise go
	# anywhere and assemble an adjacency matrix
	adj = {}
	for h1 in tsinks:
		for h2 in tsinks:
			if h1 == h2:
				continue
			dx = h1[0]-h2[0]
			dy = h1[1]-h2[1]
			if ( (abs(dx) == 0 and abs(dy) == 1)
				 or (abs(dx) == 1 and abs(dy) == 0)
				 or (dx+dy == 0 and abs(dx) == 1) ):
				if h1 not in adj:
					adj[h1] = []
				adj[h1].append(h2)
				if h2 not in adj:
					adj[h2] = []
				adj[h2].append(h1)
	#sys.stderr.write("Adjacency matrix: %d sinks are next to another\n" % len(adj))

	# Compute the sink groups
	groups = []
	curgroup = set()
	while len(adj) > 0:
		removed = True # Ensure that we go around for at least one more loop
		queue = [adj.iterkeys().next()]
		while len(queue) > 0:
			item = queue.pop()
			curgroup.add(item)
			if item in adj:
				for h in adj[item]:
					queue.append(h)
				del adj[item]
		groups.append(curgroup)
		curgroup = set()

	#sys.stderr.write("Groups are " + str(groups) + "\n")

	# For each group, just pick one element, and dump the rest
	# into that one
	for g in groups:
		s = g.pop()
		for h in g:
			down[h[0]][h[1]] = s
			tsinks.remove(h)
			#if 50 <= h[0] <= 54 and 13 <= h[1] <= 17:
			#	print "Merging " + str(h) + " into " + str(s)

	return tsinks

def check_boundary(r, h, msg):
	if height[h[0]][h[1]] > -75:
		return
	print msg, r
	for dy in xrange(-2, 3):
		for dx in xrange(-2, 3):
			if max(abs(dx), abs(dy), abs(dx+dy)) > 2:
				continue
			x = h[0] + dx
			y = h[1] + dy
			print ("(%d, %d)" % (x, y)), height[x][y], block[x][y], down[x][y], "  |||  ",
		print
	sys.exit(0)

###############################

# Height field
height = [ [ None for y in xrange(0, MAX_X-x) ] for x in xrange(0, MAX_X) ]
# Which direction is down?
down   = [ [ None for y in xrange(0, MAX_X-x) ] for x in xrange(0, MAX_X) ]
# How many hexes drain through this one?
usage  = [ [ None for y in xrange(0, MAX_X-x) ] for x in xrange(0, MAX_X) ]
# What's the sink that we belong to?
block  = [ [ None for y in xrange(0, MAX_X-x) ] for x in xrange(0, MAX_X) ]

###############################

class Sink(object):
	def __init__(self, x, y):
		self.x = x
		self.y = y
		self.colour = random()
		self.borders = get_neighbours(x, y)
		self.underwater = set()
		h = (x, y)
		self.underwater.add(h)
		self.catchment = set()
		self.overflow = None

	def __repr__(self):
		return "%x @ (%d, %d)" % (id(self), self.x, self.y)

	def fill_next_hex(self):
		# Fill up this lake until the next hex gets covered with water:
		# Work out the next hex, first (at the end of the list)
		#print "fill_next_hex for", self.x, self.y
		borders = sorted(self.borders,
						 lambda a,b: cmp(height[a[0]][a[1]],
										 height[b[0]][b[1]])
						 )
		#print "Borders:", borders
		#print "Underwater:", self.underwater
		if len(borders) == 0:
			return None
		h = borders[0]
		# Move that hex to the list of underwater hexes
		self.borders.remove(h)
		self.underwater.add(h)

		# Extend the border hexes
		nbrs = get_neighbours(h[0], h[1])
		nbrs -= self.underwater
		self.borders |= nbrs
		#print "Add neighbours:", self.borders
		#print "Underwater:", self.underwater
		#print "Returning hex:", h
		#print

		return h

################################

sys.stderr.write("Reading files\n")

# Load the height files
for f in hfiles:
	common.load_to_array(height, f, transform_coords)

# Force everything to the right datatype
for x in xrange(0, MAX_X):
	for y in xrange(0, MAX_X-x):
		if height[x][y] is not None:
			height[x][y] = int(float(height[x][y]))

z = 0
work_done = True
while work_done:
	work_done = False
	sinks = {}
	down   = [ [ None for y in xrange(0, MAX_X-x) ] for x in xrange(0, MAX_X) ]
	usage  = [ [ None for y in xrange(0, MAX_X-x) ] for x in xrange(0, MAX_X) ]
	block  = [ [ None for y in xrange(0, MAX_X-x) ] for x in xrange(0, MAX_X) ]

	# Work out which way is downhill for each hex
	tsinks = []
	for x in xrange(0, MAX_X):
		for y in xrange(0, MAX_X-x):
			dh = get_downhill(x, y, height)
			if dh is None:
				tsinks.append((x, y))
			down[x][y] = dh
			usage[x][y] = 0

	# Deal with flows at the same height
	removed = True
	flip = True
	degroup_now = True
	while removed:
		removed = False
		tmp = []
		# First, find all the obvious downhills we can
		for h in tsinks[:]:
			found = False
			for n in get_neighbours(h[0], h[1]):
				if height[n[0]][n[1]] != height[h[0]][h[1]]:
					# Hexes should be at the same height
					continue
				if down[n[0]][n[1]] is None:
					# If the neighbour is also a sink, ignore it
					continue
				if down[n[0]][n[1]] == h:
					# If the neighbour drains here, ignore it
					continue
				removed = True
				found = True
				down[h[0]][h[1]] = n
				break

			if not found:
				# We didn't find a downhill for this hex, so hang on
				# to it for another pass
				tmp.append(h)

		#sys.stderr.write("Removed %d false sinks, leaving %d\n" % (len(tsinks)-len(tmp), len(tmp)))

		if degroup_now:
			degroup_now = False
			tsinks = degroup(tmp, down)
		else:
			tsinks = tmp
				
	sys.stderr.write("%d sinks remaining\n" % len(tsinks))

	# At this point, we now have a consistent map of drainage, with no
	# loops.
	for t in tsinks:
		sinks[t] = Sink(t[0], t[1])

	# Work out where each individual hex's water ends up in the end
	for x in xrange(0, MAX_X):
		for y in xrange(0, MAX_X-x):
			run_downhill(x, y, sinks, height, down, usage, block, 1)

	# For each drainage region (from the highest one), find the point
	# where it drains into the next one, and follow it downhill again
	si = sinks.keys()
	si.sort(lambda a, b: cmp(height[a[0]][a[1]], height[b[0]][b[1]]),
			reverse=True)

	overflows = set()
	while len(si) > 0:
		region = sinks[si.pop()]
		# Regions at the very edge of the map don't get processed
		if region.x == 0 or region.y == 0 or region.x+region.y == MAX_X-1:
			continue
		#print "=== Working with region:", region
		h = region.fill_next_hex()
		shed = None
		while h is not None:
			tmp = shed
			shed = h
			# Jump out if we've found another region
			if block[h[0]][h[1]] != region:
				#check_boundary(region, h, "New hex in different region from " + str(tmp))
				break
			# Jump out if we've hit the edge of the map
			if h[0] == 0 or h[1] == 0 or h[0]+h[1] == MAX_X-1:
				#check_boundary(region, h, "Hit map edge from " + str(shed))
				#shed = None
				break
			# Get the next hex and keep the last one
			h = region.fill_next_hex()
			# Jump out with the higher position if we've moved downhill
			if h is not None and height[shed[0]][shed[1]] > height[h[0]][h[1]]:
				#check_boundary(region, h, "Moved downhill from " + str(shed))
				break

		#print "Edge found, into region", block[shed[0]][shed[1]]
		# Now we've found it, mark it
		if shed is not None:
			overflows.add(shed)
		region.colour = len(si)

	changed = 0
	# For each region, drop the overflow edge by a bit and go round again
	for h in overflows:
		work_done = True
		changed += 1
		height[h[0]][h[1]] -= 1

	sys.stderr.write("Writing file %d\n" % z)
	sys.stderr.write("Made %d changes\n" % changed)

	write_file("height.%04d.txt" % z, lambda x,y: height[x][y])
	write_file("usage.%04d.txt" % z, lambda x,y: usage[x][y])
	write_file("block.%04d.txt" % z, lambda x,y: block[x][y].colour)
	
	z += 1
#write_file(wout, neww)
